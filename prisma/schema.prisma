// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique @db.String
  password String @db.String

  name    String  @db.String
  image   String  @default("/default.jpg") @db.String
  address String? @db.String
  role    Role    @default(USER)

  followers    User[]   @relation("Follows", fields: [followerIDs], references: [id])
  followerIDs  String[] @db.ObjectId
  following    User[]   @relation("Follows", fields: [followingIDs], references: [id])
  followingIDs String[] @db.ObjectId

  sessions   Session[]
  categories Category[]
  products   Product[]
  cartItems  CartItem[]
  carts      Cart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime @db.Date

  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String @db.ObjectId
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique @db.String
  image String @default("/logo.svg") @db.String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  products Product[]

  createdAt DateTime @default(now())
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @db.String
  description String @db.String
  image       String @default("/logo.svg") @db.String

  price Float @db.Double
  stock Int   @db.Int
  sold  Int   @db.Int

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  NEW
  COMPLETED
  SHIPPED
  CANCELLED
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId String  @db.ObjectId

  quantity Int @db.Int

  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String @db.ObjectId
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  status Status @default(NEW)

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

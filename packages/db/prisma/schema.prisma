// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

type DiscordUser {
  id       String
  username String
  avatar   String
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  discord DiscordUser?
  email   String       @unique @db.String

  name       String  @db.String
  avatar     String? @db.String
  role       Role    @default(USER)
  password   String? @db.String
  resetToken String? @db.String

  sessions Session[]
  products Product[]
  comments Comment[]
  orders   Order[]

  createdAt DateTime @default(now()) @db.Date
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime @db.Date

  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String @db.ObjectId

  @@index([userId])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String  @unique @db.String
  description String? @db.String
  image       String  @default("/logo.svg")

  products Product[]

  createdAt DateTime @default(now()) @db.Date
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String  @db.String
  description String? @db.String
  image       String  @default("/logo.svg")
  price       Float   @db.Double
  stock       Int     @db.Int

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @db.ObjectId

  owner  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  comments Comment[]

  createdAt DateTime @default(now()) @db.Date
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId

  content String @db.String
  stars   Int    @db.Int
}

type OrderItem {
  productId String
  quantity  Int
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  items OrderItem[]
  total Float       @db.Double

  createdAt DateTime @default(now()) @db.Date
}
